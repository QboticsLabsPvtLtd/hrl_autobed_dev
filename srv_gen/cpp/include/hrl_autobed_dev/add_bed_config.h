/* Auto-generated by genmsg_cpp for file /home/yashc/fuerte_workspace/sandbox/git/hrl_autobed_dev/srv/add_bed_config.srv */
#ifndef HRL_AUTOBED_DEV_SERVICE_ADD_BED_CONFIG_H
#define HRL_AUTOBED_DEV_SERVICE_ADD_BED_CONFIG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace hrl_autobed_dev
{
template <class ContainerAllocator>
struct add_bed_configRequest_ {
  typedef add_bed_configRequest_<ContainerAllocator> Type;

  add_bed_configRequest_()
  : config()
  {
  }

  add_bed_configRequest_(const ContainerAllocator& _alloc)
  : config(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _config_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  config;


  typedef boost::shared_ptr< ::hrl_autobed_dev::add_bed_configRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hrl_autobed_dev::add_bed_configRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct add_bed_configRequest
typedef  ::hrl_autobed_dev::add_bed_configRequest_<std::allocator<void> > add_bed_configRequest;

typedef boost::shared_ptr< ::hrl_autobed_dev::add_bed_configRequest> add_bed_configRequestPtr;
typedef boost::shared_ptr< ::hrl_autobed_dev::add_bed_configRequest const> add_bed_configRequestConstPtr;


template <class ContainerAllocator>
struct add_bed_configResponse_ {
  typedef add_bed_configResponse_<ContainerAllocator> Type;

  add_bed_configResponse_()
  : success(false)
  {
  }

  add_bed_configResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


  typedef boost::shared_ptr< ::hrl_autobed_dev::add_bed_configResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hrl_autobed_dev::add_bed_configResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct add_bed_configResponse
typedef  ::hrl_autobed_dev::add_bed_configResponse_<std::allocator<void> > add_bed_configResponse;

typedef boost::shared_ptr< ::hrl_autobed_dev::add_bed_configResponse> add_bed_configResponsePtr;
typedef boost::shared_ptr< ::hrl_autobed_dev::add_bed_configResponse const> add_bed_configResponseConstPtr;

struct add_bed_config
{

typedef add_bed_configRequest Request;
typedef add_bed_configResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct add_bed_config
} // namespace hrl_autobed_dev

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hrl_autobed_dev::add_bed_configRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hrl_autobed_dev::add_bed_configRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hrl_autobed_dev::add_bed_configRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b3532af339db184b4a6a974d00ee4fe6";
  }

  static const char* value(const  ::hrl_autobed_dev::add_bed_configRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb3532af339db184bULL;
  static const uint64_t static_value2 = 0x4a6a974d00ee4fe6ULL;
};

template<class ContainerAllocator>
struct DataType< ::hrl_autobed_dev::add_bed_configRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hrl_autobed_dev/add_bed_configRequest";
  }

  static const char* value(const  ::hrl_autobed_dev::add_bed_configRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hrl_autobed_dev::add_bed_configRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string config\n\
\n\
";
  }

  static const char* value(const  ::hrl_autobed_dev::add_bed_configRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hrl_autobed_dev::add_bed_configResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hrl_autobed_dev::add_bed_configResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hrl_autobed_dev::add_bed_configResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::hrl_autobed_dev::add_bed_configResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::hrl_autobed_dev::add_bed_configResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hrl_autobed_dev/add_bed_configResponse";
  }

  static const char* value(const  ::hrl_autobed_dev::add_bed_configResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hrl_autobed_dev::add_bed_configResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
";
  }

  static const char* value(const  ::hrl_autobed_dev::add_bed_configResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hrl_autobed_dev::add_bed_configResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hrl_autobed_dev::add_bed_configRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.config);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct add_bed_configRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hrl_autobed_dev::add_bed_configResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct add_bed_configResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hrl_autobed_dev::add_bed_config> {
  static const char* value() 
  {
    return "b43b6e2f4ff2ffe6e9e8f6e13cce1eb5";
  }

  static const char* value(const hrl_autobed_dev::add_bed_config&) { return value(); } 
};

template<>
struct DataType<hrl_autobed_dev::add_bed_config> {
  static const char* value() 
  {
    return "hrl_autobed_dev/add_bed_config";
  }

  static const char* value(const hrl_autobed_dev::add_bed_config&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hrl_autobed_dev::add_bed_configRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b43b6e2f4ff2ffe6e9e8f6e13cce1eb5";
  }

  static const char* value(const hrl_autobed_dev::add_bed_configRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hrl_autobed_dev::add_bed_configRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hrl_autobed_dev/add_bed_config";
  }

  static const char* value(const hrl_autobed_dev::add_bed_configRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hrl_autobed_dev::add_bed_configResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b43b6e2f4ff2ffe6e9e8f6e13cce1eb5";
  }

  static const char* value(const hrl_autobed_dev::add_bed_configResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hrl_autobed_dev::add_bed_configResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hrl_autobed_dev/add_bed_config";
  }

  static const char* value(const hrl_autobed_dev::add_bed_configResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HRL_AUTOBED_DEV_SERVICE_ADD_BED_CONFIG_H

